<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ctw2100.github.io</id>
    <title>ASAP</title>
    <updated>2020-10-27T05:56:01.866Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ctw2100.github.io"/>
    <link rel="self" href="https://ctw2100.github.io/atom.xml"/>
    <subtitle>ASAP</subtitle>
    <logo>https://ctw2100.github.io/images/avatar.png</logo>
    <icon>https://ctw2100.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ASAP</rights>
    <entry>
        <title type="html"><![CDATA[Draw Round Shape in SwiftUI]]></title>
        <id>https://ctw2100.github.io/mk-4ZBDqR/</id>
        <link href="https://ctw2100.github.io/mk-4ZBDqR/">
        </link>
        <updated>2020-08-06T13:52:38.000Z</updated>
        <content type="html"><![CDATA[<h2 id="use-geometryreader-uibezierpath">use GeometryReader + UIBezierPath</h2>
<pre><code>struct Rounded: Shape {
    func path(in rect: CGRect) -&gt; Path {
        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 40, height: 40))
        return Path(path.cgPath)
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Class VS Struct]]></title>
        <id>https://ctw2100.github.io/z7pJDxN0T/</id>
        <link href="https://ctw2100.github.io/z7pJDxN0T/">
        </link>
        <updated>2020-08-01T05:26:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="class-and-struct-is-very-similar-in-ios-development-so-whats-different-between-them">Class and Struct is very similar in IOS development, So what's different between them?</h2>
<h3 id="first-class-is-reference-types-struct-is-value-types">first, Class is reference types, Struct is value types.</h3>
<h2 id="so-whatis-reference-types-and-value-types">So what'is reference types and value types?</h2>
<h3 id="reference-types-is-just-like-google-sheet-it-has-one-source-of-truth-everyone-can-both-edit-and-change">reference types is just like Google Sheet, it has one source of truth, everyone can both edit and change</h3>
<figure data-type="image" tabindex="1"><img src="https://ctw2100.github.io/post-images/1603778139959.png" alt="" loading="lazy"></figure>
<h3 id="value-types-is-just-like-microsoft-excel-when-you-wanna-change-it-it-doesnt-change-me-file-just-like-i-sent-you-a-copy-file">value types is just like Microsoft Excel, when you wanna change it, it doesn't change me file, just like I sent you a copy file.</h3>
<figure data-type="image" tabindex="2"><img src="https://ctw2100.github.io/post-images/1603778146512.png" alt="" loading="lazy"></figure>
<p>Here is some example explain different between Class and Struct:</p>
<pre><code>class Developr {
    var name: String?
    var jobTitle: String?
    var yearsExp: Int?

    init(name: String, jobTitle: String, yearsExp: Int) {
        self.name = name
        self.jobTitle = jobTitle
        self.yearsExp = yearsExp
    }
}

var sean = Developer(name: &quot;Sean&quot;, jobTitle: &quot;IOS Enngineer&quot;, yearsExp: 5)
var joe = sean
joe.name = &quot;Joe&quot;
sean.name // because Class is reference types, so sean.name is &quot;Joe&quot;
</code></pre>
<pre><code>struct Developr {
    var name: String
    var jobTitle: String
    var yearsExp: Int

    // struct don't have init in it.
}

var sean = Developer(name: &quot;Sean&quot;, jobTitle: &quot;IOS Enngineer&quot;, yearsExp: 5)
var joe = sean // joe got copy of sean
joe.name = &quot;Joe&quot;
sean.name // because Class is value types, so sean.name is &quot;Sean&quot;
</code></pre>
]]></content>
    </entry>
</feed>